{
    "docs": [
        {
            "location": "/", 
            "text": "About BigGIS?\n\n\nBigGIS is a new generation of GIS that supports decision making in multiple\nscenarios which require processing of large and heterogeneous data sets.\n\n\nThe novelty lies in an integrated analytical approach to spatio-temporal\ndata, that are unstructured and from unreliable sources. The system provides\npredictive, prescriptive and visual tool integrated in a common analytical\npipeline.\n\n\n\n\n\n\n\n\nThe project is evaluated on three scenarios:\n\n\n\n\nSmart city\n (urban heat islands, particulate matter)\n\n\nEnvironmental management\n (health threatening animals and plants)\n\n\nDisaster control, civil protection\n (air pollution, toxic chemicals)\n\n\n\n\nPlease visit the \nproject website\n for more\ninformation as well as some interactive demos.\n\n\nWhy BigGIS?\n\n\nCurrent GIS solution are mostly tackling big data related requirements in\nterms of data volume or data velocity. In the era of cloud computing,\nleveraging cloud-based resources is a widely adopted pattern. In addition,\nwith the advent of big data analytics, performing massively parallel\nanalytical tasks on large-scale data at rest or data in motion is as well\nbecoming a feasible approach shaping the design of today\u2019s GIS. Although\nscaling out enables GIS to tackle the aforementioned big data induced\nrequirements, there are still two major open issues. Firstly, dealing with\nvarying data types across multiple data sources (variety) lead to data and\nschema heterogeneity, e.g., to describe locations such as addresses, relative\nspatial relationships or different coordinates reference systems. Secondly,\nmodeling the inherent uncertainties in data (veracity), e.g., real-world\nnoise and erroneous values due to the nature of the data collecting process.\nBoth being crucial tasks in data management and analytics that directly\naffect the information retrieval and decision-making quality and moreover\nthe generated knowledge on human-side (value). By leveraging the the\ncontinuous refinement model, we present a holistic approach that explicitly\ndeals with all big data dimensions. By integrating the user in the\nprocess, computers can learn from the cognitive and perceptive skills of\nhuman analysis to create hidden connections between data and the problem\ndomain. This helps to decrease the noise and uncertainty and allows to\nbuild up trust in the analysis results on user side which will eventually\nlead to an increasing likelihood of relevant findings and generated\nknowledge.\n\n\nContact and Support\n\n\n\n\n\n\n\n\nRole\n\n\nName\n\n\nE-mail\n\n\n\n\n\n\n\n\n\n\nContact person\n\n\nProf. Dr. Thomas Setzer\n\n\n\n\n\n\n\n\nProject coordination\n\n\nDr. Viliam Simko", 
            "title": "Home"
        }, 
        {
            "location": "/#about-biggis", 
            "text": "BigGIS is a new generation of GIS that supports decision making in multiple\nscenarios which require processing of large and heterogeneous data sets.  The novelty lies in an integrated analytical approach to spatio-temporal\ndata, that are unstructured and from unreliable sources. The system provides\npredictive, prescriptive and visual tool integrated in a common analytical\npipeline.     The project is evaluated on three scenarios:   Smart city  (urban heat islands, particulate matter)  Environmental management  (health threatening animals and plants)  Disaster control, civil protection  (air pollution, toxic chemicals)   Please visit the  project website  for more\ninformation as well as some interactive demos.", 
            "title": "About BigGIS?"
        }, 
        {
            "location": "/#why-biggis", 
            "text": "Current GIS solution are mostly tackling big data related requirements in\nterms of data volume or data velocity. In the era of cloud computing,\nleveraging cloud-based resources is a widely adopted pattern. In addition,\nwith the advent of big data analytics, performing massively parallel\nanalytical tasks on large-scale data at rest or data in motion is as well\nbecoming a feasible approach shaping the design of today\u2019s GIS. Although\nscaling out enables GIS to tackle the aforementioned big data induced\nrequirements, there are still two major open issues. Firstly, dealing with\nvarying data types across multiple data sources (variety) lead to data and\nschema heterogeneity, e.g., to describe locations such as addresses, relative\nspatial relationships or different coordinates reference systems. Secondly,\nmodeling the inherent uncertainties in data (veracity), e.g., real-world\nnoise and erroneous values due to the nature of the data collecting process.\nBoth being crucial tasks in data management and analytics that directly\naffect the information retrieval and decision-making quality and moreover\nthe generated knowledge on human-side (value). By leveraging the the\ncontinuous refinement model, we present a holistic approach that explicitly\ndeals with all big data dimensions. By integrating the user in the\nprocess, computers can learn from the cognitive and perceptive skills of\nhuman analysis to create hidden connections between data and the problem\ndomain. This helps to decrease the noise and uncertainty and allows to\nbuild up trust in the analysis results on user side which will eventually\nlead to an increasing likelihood of relevant findings and generated\nknowledge.", 
            "title": "Why BigGIS?"
        }, 
        {
            "location": "/#contact-and-support", 
            "text": "Role  Name  E-mail      Contact person  Prof. Dr. Thomas Setzer     Project coordination  Dr. Viliam Simko", 
            "title": "Contact and Support"
        }, 
        {
            "location": "/Documentation Howto/", 
            "text": "Documentation Howto\n\n\nWe use \nmkdocs\n for documenting the project.\n\n\nThe documentation is written as a set of Markdown files within the \ndocs/\n directory and after deployment\navailable as a static website: \nDocs Website\n.\n\n\nBefore building the docs\n\n\nFirst of all, you need \npython\n and \npip\n to be installed.\nUsing pip, you need to install the following packages:\n\n\n\n\nmkdocs\n : Provides the executable command \nmkdocs\n.\n\n\nmkdocs-material\n : A material design theme, see also \nthis page\n.\n\n\n\n\nYou can install the packages either locally as a user into \n~/.local/\n or system-wide\n(when omitting the \n--user\n parameter).\n\n\n1\n2\npip install --user mkdocs\npip install --user mkdocs-material\n\n\n\n\n\n\nHow to edit\n\n\nBefore editing the documentation, start the live-reloading docs server\nusing \nmkdocs serve\n within the project root directory.\nThen, open the page \nhttp://127.0.0.1:8000\n in your browser and watch your edits being reloaded \nautomatically.\n\n\n1\nmkdocs serve\n\n\n\n\n\n\nINFO    -  Building documentation... \nINFO    -  Cleaning site directory \n[I 171024 15:03:51 server:283] Serving on http://127.0.0.1:8000\n[I 171024 15:03:51 handlers:60] Start watching changes\n\n\n\n\nYou can now edit the markdown documents with the \ndocs/\n directory.\n\n\nDeployment\n\n\nUsing the command \nmkdocs gh-deploy\n we can generate a static \nDocs Website\n\nand deploy it automatically as a github page (served from \ngh-pages\n branch).\n\n\n\n\nNote\n\n\nThe newly deployed version appears after few seconds.\n\n\n\n\nDocumentation layout\n\n\nmkdocs.yml    # The configuration file.\ndocs/\n  index.md    # The documentation homepage.\n  ...         # Other markdown pages, images and other files.\n\n\n\n\n\nFormatting examples\n\n\nSectioning\n\n\n# Chapter\n\n## Section\n\n### Subsection\n\n\n\n\n\nFootnotes\n\n\nSee also \nhttps://squidfunk.github.io/mkdocs-material/extensions/footnotes/\n\n\nSome text with a footnote[^1]\n\n[^1]: Text of the footnote\n\n\n\n\n\nCitations, Notes\n\n\n!!! Citation\n    Here comes the citation including authors, title, year, doi, url ...\n\n\n\n\n\n\n\nCitation\n\n\nHere comes the citation including authors, title, year, doi, url ...\n\n\n\n\nImages and Figures\n\n\nYou can include images into the documentation in the following format:\n\n\n\n\nSVG\n (scalable vectors).\n\n\nJPG\n (photos)\n\n\nPNG\n (raster graphics)\n\n\n\n\nIn contrast to scientific papers, it is not possible to create references to numbered figures in markdown.\nSee also \nhttp://www.mkdocs.org/user-guide/writing-your-docs/#images-and-media\n\n\n![Image \nalt\n description](path/to/image.svg)\n\n\n\n\n\n\n\nTables\n\n\nSee also \nhttp://www.mkdocs.org/user-guide/writing-your-docs/#tables\n\n\nFirst Header | Second Header | Third Header\n------------ | ------------- | ------------\nContent Cell | Content Cell  | Content Cell\nContent Cell | Content Cell  | Content Cell\n\n\n\n\n\n\n\n\n\n\n\nFirst Header\n\n\nSecond Header\n\n\nThird Header\n\n\n\n\n\n\n\n\n\n\nContent Cell\n\n\nContent Cell\n\n\nContent Cell\n\n\n\n\n\n\nContent Cell\n\n\nContent Cell\n\n\nContent Cell\n\n\n\n\n\n\n\n\nFormulas\n\n\nFormula are generated using \nMathJax\n, which is similar to LaTeX.\nSee also this \nquick reference\n.\n\n\n$$\n\\frac{n!}{k!(n-k)!} = \\binom{n}{k}\n$$\n\n\n\n\n\n\\[\n\\frac{n!}{k!(n-k)!} = \\binom{n}{k}\n\\]\nSource Code\n\n\nCode can be displayed inline like this:\n\n\n`print 1+{variable}`\n\n\n\n\n\nOr it can be displayed in a code block with optional syntax highlighting if the language is specified.\n\n\n```python\ndef my_function():\n    \njust a test\n\n    print 8/2 \n```\n\n\n\n\n\ndef\n \nmy_function\n():\n\n    \njust a test\n\n    \nprint\n \n8\n/\n2\n \n\n\n\n\nSmart Symbols\n\n\nSee also \nhttps://facelessuser.github.io/pymdown-extensions/extensions/smartsymbols/\n\n\nSome smart symbols: --\n,  \n--, 1st, 2nd, 1/4\n\n\n\n\n\nSome smart symbols: \n,  \n, 1\nst\n, 2\nnd\n, \n\n\nSequence diagrams\n\n\n```sequence\nTitle: Example sequence diagram\nA-\nB: Sync call\nB--\nA: Sync return\nA-\nC: Another sync call\nC-\nD: Async call\nD--\nC: Async return\n```\n\n\n\n\nTitle: Example sequence diagram\nA-\nB: Sync call\nB--\nA: Sync return\nA-\nC: Another sync call\nC-\nD: Async call\nD--\nC: Async return", 
            "title": "Documentation Howto"
        }, 
        {
            "location": "/Documentation Howto/#documentation-howto", 
            "text": "We use  mkdocs  for documenting the project.  The documentation is written as a set of Markdown files within the  docs/  directory and after deployment\navailable as a static website:  Docs Website .", 
            "title": "Documentation Howto"
        }, 
        {
            "location": "/Documentation Howto/#before-building-the-docs", 
            "text": "First of all, you need  python  and  pip  to be installed.\nUsing pip, you need to install the following packages:   mkdocs  : Provides the executable command  mkdocs .  mkdocs-material  : A material design theme, see also  this page .   You can install the packages either locally as a user into  ~/.local/  or system-wide\n(when omitting the  --user  parameter).  1\n2 pip install --user mkdocs\npip install --user mkdocs-material", 
            "title": "Before building the docs"
        }, 
        {
            "location": "/Documentation Howto/#how-to-edit", 
            "text": "Before editing the documentation, start the live-reloading docs server\nusing  mkdocs serve  within the project root directory.\nThen, open the page  http://127.0.0.1:8000  in your browser and watch your edits being reloaded \nautomatically.  1 mkdocs serve   INFO    -  Building documentation... \nINFO    -  Cleaning site directory \n[I 171024 15:03:51 server:283] Serving on http://127.0.0.1:8000\n[I 171024 15:03:51 handlers:60] Start watching changes  You can now edit the markdown documents with the  docs/  directory.", 
            "title": "How to edit"
        }, 
        {
            "location": "/Documentation Howto/#deployment", 
            "text": "Using the command  mkdocs gh-deploy  we can generate a static  Docs Website \nand deploy it automatically as a github page (served from  gh-pages  branch).   Note  The newly deployed version appears after few seconds.", 
            "title": "Deployment"
        }, 
        {
            "location": "/Documentation Howto/#documentation-layout", 
            "text": "mkdocs.yml    # The configuration file.\ndocs/\n  index.md    # The documentation homepage.\n  ...         # Other markdown pages, images and other files.", 
            "title": "Documentation layout"
        }, 
        {
            "location": "/Documentation Howto/#formatting-examples", 
            "text": "", 
            "title": "Formatting examples"
        }, 
        {
            "location": "/Documentation Howto/#sectioning", 
            "text": "# Chapter\n\n## Section\n\n### Subsection", 
            "title": "Sectioning"
        }, 
        {
            "location": "/Documentation Howto/#footnotes", 
            "text": "See also  https://squidfunk.github.io/mkdocs-material/extensions/footnotes/  Some text with a footnote[^1]\n\n[^1]: Text of the footnote", 
            "title": "Footnotes"
        }, 
        {
            "location": "/Documentation Howto/#citations-notes", 
            "text": "!!! Citation\n    Here comes the citation including authors, title, year, doi, url ...   Citation  Here comes the citation including authors, title, year, doi, url ...", 
            "title": "Citations, Notes"
        }, 
        {
            "location": "/Documentation Howto/#images-and-figures", 
            "text": "You can include images into the documentation in the following format:   SVG  (scalable vectors).  JPG  (photos)  PNG  (raster graphics)   In contrast to scientific papers, it is not possible to create references to numbered figures in markdown.\nSee also  http://www.mkdocs.org/user-guide/writing-your-docs/#images-and-media  ![Image  alt  description](path/to/image.svg)", 
            "title": "Images and Figures"
        }, 
        {
            "location": "/Documentation Howto/#tables", 
            "text": "See also  http://www.mkdocs.org/user-guide/writing-your-docs/#tables  First Header | Second Header | Third Header\n------------ | ------------- | ------------\nContent Cell | Content Cell  | Content Cell\nContent Cell | Content Cell  | Content Cell     First Header  Second Header  Third Header      Content Cell  Content Cell  Content Cell    Content Cell  Content Cell  Content Cell", 
            "title": "Tables"
        }, 
        {
            "location": "/Documentation Howto/#formulas", 
            "text": "Formula are generated using  MathJax , which is similar to LaTeX.\nSee also this  quick reference .  $$\n\\frac{n!}{k!(n-k)!} = \\binom{n}{k}\n$$  \\[\n\\frac{n!}{k!(n-k)!} = \\binom{n}{k}\n\\]", 
            "title": "Formulas"
        }, 
        {
            "location": "/Documentation Howto/#source-code", 
            "text": "Code can be displayed inline like this:  `print 1+{variable}`  Or it can be displayed in a code block with optional syntax highlighting if the language is specified.  ```python\ndef my_function():\n     just a test \n    print 8/2 \n```  def   my_function (): \n     just a test \n     print   8 / 2", 
            "title": "Source Code"
        }, 
        {
            "location": "/Documentation Howto/#smart-symbols", 
            "text": "See also  https://facelessuser.github.io/pymdown-extensions/extensions/smartsymbols/  Some smart symbols: -- ,   --, 1st, 2nd, 1/4  Some smart symbols:  ,   , 1 st , 2 nd ,", 
            "title": "Smart Symbols"
        }, 
        {
            "location": "/Documentation Howto/#sequence-diagrams", 
            "text": "```sequence\nTitle: Example sequence diagram\nA- B: Sync call\nB-- A: Sync return\nA- C: Another sync call\nC- D: Async call\nD-- C: Async return\n```  Title: Example sequence diagram\nA- B: Sync call\nB-- A: Sync return\nA- C: Another sync call\nC- D: Async call\nD-- C: Async return", 
            "title": "Sequence diagrams"
        }, 
        {
            "location": "/contributing/", 
            "text": "Contributing\n\n\nWe value all kinds of contributions from the community, not just actual\ncode. If you do like to contribute actual code in the form of bug fixes, new\nfeatures or other patches this page gives you more info on how to do it.\n\n\nGit Branching Model\n\n\nThe BigGIS team follows the standard practice of using the\n\nmaster\n branch as main integration branch.\n\n\nGit Commit Messages\n\n\nWe follow the 'imperative present tense' style for commit messages.\n(e.g. \"Add new EnterpriseWidgetLoader instance\")\n\n\nIssue Tracking\n\n\nIf you find a bug and would like to report it please go to the github\nissue tracker of a given sub-project and file an issue.\n\n\nPull Requests\n\n\nIf you'd like to submit a code contribution please fork BigGIS and\nsend us pull request against the \nmaster\n branch. Like any other open\nsource project, we might ask you to go through some iterations of\ndiscussion and refinement before merging.\n\n\nContributing documentation\n\n\nsee \nDocumentation Howto", 
            "title": "Contributing"
        }, 
        {
            "location": "/contributing/#contributing", 
            "text": "We value all kinds of contributions from the community, not just actual\ncode. If you do like to contribute actual code in the form of bug fixes, new\nfeatures or other patches this page gives you more info on how to do it.", 
            "title": "Contributing"
        }, 
        {
            "location": "/contributing/#git-branching-model", 
            "text": "The BigGIS team follows the standard practice of using the master  branch as main integration branch.", 
            "title": "Git Branching Model"
        }, 
        {
            "location": "/contributing/#git-commit-messages", 
            "text": "We follow the 'imperative present tense' style for commit messages.\n(e.g. \"Add new EnterpriseWidgetLoader instance\")", 
            "title": "Git Commit Messages"
        }, 
        {
            "location": "/contributing/#issue-tracking", 
            "text": "If you find a bug and would like to report it please go to the github\nissue tracker of a given sub-project and file an issue.", 
            "title": "Issue Tracking"
        }, 
        {
            "location": "/contributing/#pull-requests", 
            "text": "If you'd like to submit a code contribution please fork BigGIS and\nsend us pull request against the  master  branch. Like any other open\nsource project, we might ask you to go through some iterations of\ndiscussion and refinement before merging.", 
            "title": "Pull Requests"
        }, 
        {
            "location": "/contributing/#contributing-documentation", 
            "text": "see  Documentation Howto", 
            "title": "Contributing documentation"
        }, 
        {
            "location": "/architecture/BigGIS Overview/", 
            "text": "BigGIS Architecture Overview\n\n\n\n\nTodo\n\n\nThis image is actually not the overview of BigGIS :-)", 
            "title": "BigGIS Overview"
        }, 
        {
            "location": "/architecture/BigGIS Overview/#biggis-architecture-overview", 
            "text": "Todo  This image is actually not the overview of BigGIS :-)", 
            "title": "BigGIS Architecture Overview"
        }, 
        {
            "location": "/architecture/Docker Containers/", 
            "text": "Docker containers\n\n\n\n\nTodo\n\n\nPatrick\n\n\n\n\n\n\nall sources should be on github\n\n\nimages should be hosted on dockerhub\n\n\nlist of docker images that should be available:\n\n\nHDFS (should use all bwCloud resources available to BigGIS)\n\n\nKafka with Zookeeper (overview of queues needed)\n\n\nFlink\n\n\nSpark\n\n\nGeotrellis libraries (part of the Spark container?)\n\n\nAccumulo with Geomesa (or Geowave)\n\n\nStreamPipes\n\n\nExasolution\n\n\nExasolution should support Accumulo(Geomesa/Geowave) through virtual schema\n\n\nExasolution should support indexing using 2D, 3D, 4D space filling curves (lat,lon,time,elevation)\n\n\n\n\n\n\nGeo-Server\n\n\nmit Plugin f\u00fcr Accumulo\n\n\nzur Transformation von Formaten\n\n\nauch als Datenquelle f\u00fcr Cadenza", 
            "title": "Docker Containers"
        }, 
        {
            "location": "/architecture/Docker Containers/#docker-containers", 
            "text": "Todo  Patrick    all sources should be on github  images should be hosted on dockerhub  list of docker images that should be available:  HDFS (should use all bwCloud resources available to BigGIS)  Kafka with Zookeeper (overview of queues needed)  Flink  Spark  Geotrellis libraries (part of the Spark container?)  Accumulo with Geomesa (or Geowave)  StreamPipes  Exasolution  Exasolution should support Accumulo(Geomesa/Geowave) through virtual schema  Exasolution should support indexing using 2D, 3D, 4D space filling curves (lat,lon,time,elevation)    Geo-Server  mit Plugin f\u00fcr Accumulo  zur Transformation von Formaten  auch als Datenquelle f\u00fcr Cadenza", 
            "title": "Docker containers"
        }, 
        {
            "location": "/architecture/Infrastructure on bwCloud/", 
            "text": "BW Cloud\n\n\n\n\nTodo\n\n\nPatrick\n\n\n\n\n\n\nbwCloud VMs should be available, latest status here: bwCloud Status\n\n\nWeb-based admin. interface - dashboard - based on Ambari", 
            "title": "Infrastructure on bwCloud"
        }, 
        {
            "location": "/architecture/Infrastructure on bwCloud/#bw-cloud", 
            "text": "Todo  Patrick    bwCloud VMs should be available, latest status here: bwCloud Status  Web-based admin. interface - dashboard - based on Ambari", 
            "title": "BW Cloud"
        }, 
        {
            "location": "/architecture/StreamPipes/", 
            "text": "Todo\n\n\nMatthias Frank", 
            "title": "StreamPipes"
        }, 
        {
            "location": "/data sources/datasets/", 
            "text": "Data in bwCloud\n\n\nPre-cached / downloaded to bwCloud as a part of BigGIS\n\n\n\n\nATKIS land use data (multiple options possible - TODO:Matthias) TODO:how big\n\n\nshapefiles in a directory\n\n\ndata in Accumulo/Exasolution\n\n\nNew York taxi drives\n\n\n2GB/month -\n for years 2009-2015 potentially ~160GB of storage space\n\n\nmultiple options possible - TODO:Matthias\n\n\nbunch of CSV files in a directories organized per year\n\n\npoints stored in Accumulo\n\n\npoints stored in Exasolution\n\n\nLarge historical data sets (HDFS/Accumulo - TODO:Matthias):\n\n\nLUBW (REST API for pulling)\n\n\nDWD (REST API for pulling)\n\n\nWunderground (TODO:UKON)\n\n\n\n\nConnectors to external services\n\n\nThe following connectors to external data sources should be available (for pulling data as a stream).\n\n\n\n\nPulling data:\n\n\nEnvisat raster data\n\n\nLandsat raster data\n\n\nDWD weather stations\n\n\nLUBW weather stations\n\n\n\n\nWunderground weather stations\n\n\n\n\n\n\nPushing data (REST API needs to be developed from our side):\n\n\n\n\nSensor data from LoRa weather stations\n\n\nVGI data -\n compare KA Feedback (TODO)\n\n\nTODO: hyperspectral images from drones (TODO)\n\n\nTODO: other sensor data from drones (TODO)", 
            "title": "Datasets"
        }, 
        {
            "location": "/data sources/datasets/#data-in-bwcloud", 
            "text": "Pre-cached / downloaded to bwCloud as a part of BigGIS   ATKIS land use data (multiple options possible - TODO:Matthias) TODO:how big  shapefiles in a directory  data in Accumulo/Exasolution  New York taxi drives  2GB/month -  for years 2009-2015 potentially ~160GB of storage space  multiple options possible - TODO:Matthias  bunch of CSV files in a directories organized per year  points stored in Accumulo  points stored in Exasolution  Large historical data sets (HDFS/Accumulo - TODO:Matthias):  LUBW (REST API for pulling)  DWD (REST API for pulling)  Wunderground (TODO:UKON)", 
            "title": "Data in bwCloud"
        }, 
        {
            "location": "/data sources/datasets/#connectors-to-external-services", 
            "text": "The following connectors to external data sources should be available (for pulling data as a stream).   Pulling data:  Envisat raster data  Landsat raster data  DWD weather stations  LUBW weather stations   Wunderground weather stations    Pushing data (REST API needs to be developed from our side):   Sensor data from LoRa weather stations  VGI data -  compare KA Feedback (TODO)  TODO: hyperspectral images from drones (TODO)  TODO: other sensor data from drones (TODO)", 
            "title": "Connectors to external services"
        }, 
        {
            "location": "/data sources/weather-stations/", 
            "text": "Weather stations\n\n\n\n\nTodo\n\n\nJulian, Hannes, Jochen\n\n\n\n\nLUBW weather station at FZI\n\n\n\n\nthe device should be mounted at FZI (January 2017)\n\n\ndata should be available through some api (REST pull ? TODO:Hannes)\n\n\n\n\nLoRa-based weather stations\n\n\n\n\nTwo LoRa gateways should be deployed, one at FZI, the other at LUBW-KA (TODO:clarify)\n\n\nData received by the LoRa gateways:\n\n\nshould be handled in a stream-processing way (pipeline modeled using StreamPipes)\n\n\nshould be stored within BigGIS database i.e. Accumulo/Exasolution (sensor,lat,lon,ts)\n\n\nshould be sent to \nhttps://opensensemap.org/\n (TODO:Jochen)\n\n\n34 LoRa sensor units should be deployed (by Jochen Lutz)\n\n\nREST API for pushing developed using Play2 framework (REST-\nkafka)\n\n\nOutlier filtering node (kafka-\nflink-\nkafka)\n\n\nData persisting node (kafka-\nflink-\naccumulo)\n\n\n\n\nWeb-based mobile-friendly app\n\n\n\n\nQR code contains stations id and URL that leads to public web\n\n\nthe web page contains info about the station and the project\n\n\nadmin can click and change station information (or register a new station)\n\n\nlat/lon is taken from the phone (HTML5 geolocation api)\n\n\nadmin can add additional parameters (placement details)", 
            "title": "Weather stations"
        }, 
        {
            "location": "/data sources/weather-stations/#weather-stations", 
            "text": "Todo  Julian, Hannes, Jochen", 
            "title": "Weather stations"
        }, 
        {
            "location": "/data sources/weather-stations/#lubw-weather-station-at-fzi", 
            "text": "the device should be mounted at FZI (January 2017)  data should be available through some api (REST pull ? TODO:Hannes)", 
            "title": "LUBW weather station at FZI"
        }, 
        {
            "location": "/data sources/weather-stations/#lora-based-weather-stations", 
            "text": "Two LoRa gateways should be deployed, one at FZI, the other at LUBW-KA (TODO:clarify)  Data received by the LoRa gateways:  should be handled in a stream-processing way (pipeline modeled using StreamPipes)  should be stored within BigGIS database i.e. Accumulo/Exasolution (sensor,lat,lon,ts)  should be sent to  https://opensensemap.org/  (TODO:Jochen)  34 LoRa sensor units should be deployed (by Jochen Lutz)  REST API for pushing developed using Play2 framework (REST- kafka)  Outlier filtering node (kafka- flink- kafka)  Data persisting node (kafka- flink- accumulo)", 
            "title": "LoRa-based weather stations"
        }, 
        {
            "location": "/data sources/weather-stations/#web-based-mobile-friendly-app", 
            "text": "QR code contains stations id and URL that leads to public web  the web page contains info about the station and the project  admin can click and change station information (or register a new station)  lat/lon is taken from the phone (HTML5 geolocation api)  admin can add additional parameters (placement details)", 
            "title": "Web-based mobile-friendly app"
        }, 
        {
            "location": "/demos/EnviroCar/", 
            "text": "EnviroCar (Smart City)\n\n\nVisualisierung von Verkehrs- und Umweltdaten basierend auf mobilen Sensoren in Fahrzeugen\n\n\n\n\nTodo\n\n\nManuel\n\n\n\n\nRelated Scenarios\n\n\n\n\nEnvironment\n\n\nSmart City", 
            "title": "EnviroCar"
        }, 
        {
            "location": "/demos/EnviroCar/#envirocar-smart-city", 
            "text": "Visualisierung von Verkehrs- und Umweltdaten basierend auf mobilen Sensoren in Fahrzeugen   Todo  Manuel", 
            "title": "EnviroCar (Smart City)"
        }, 
        {
            "location": "/demos/EnviroCar/#related-scenarios", 
            "text": "Environment  Smart City", 
            "title": "Related Scenarios"
        }, 
        {
            "location": "/demos/Gas Cloud Detection/", 
            "text": "Todo\n\n\nBodo\n\n\n\n\n\n\nChlorophyll-Erkennung im Befliegungsexperiment\n\n\nUnsichtbare Schadgaswolke (IR-Bereich)\n\n\nHei\u00dfe oder kalte Gase/Gegenst\u00e4nde leicht zu erkennen\n\n\nGase mit Umgebungstemperatur im IR-Bild nicht zu erkennen.\n\n\nSubtraktion von georeferenzierten und zus\u00e4tzlich positionskorrigierten Bildern aus Zeitreihen macht kleine \n  Abweichungen in Bildern sichtbar -\n Wolken unsichtbarer Gase im Bild sichtbar\n\n\n\n\nBefliegungskampagne am 15./16.07.17\n\n\n\n\nAnalyse von Gaswolken aus der Luft\n\n\nTools:\n\n\nIR/RGB-Kamera\n\n\nHyperspektralkamera\n\n\n\n\n\n\n\n\n\n\nEtablierung einer Funkstrecke\n\n\n\u00dcbertragung von Flugplan-Daten/Bildergebnissen\n\n\n\n\n\n\n\n\nRelated Scenarios\n\n\n\n\nDisaster Management\n\n\nSmart City", 
            "title": "Gas Cloud Detection"
        }, 
        {
            "location": "/demos/Gas Cloud Detection/#befliegungskampagne-am-15160717", 
            "text": "Analyse von Gaswolken aus der Luft  Tools:  IR/RGB-Kamera  Hyperspektralkamera      Etablierung einer Funkstrecke  \u00dcbertragung von Flugplan-Daten/Bildergebnissen", 
            "title": "Befliegungskampagne am 15./16.07.17"
        }, 
        {
            "location": "/demos/Gas Cloud Detection/#related-scenarios", 
            "text": "Disaster Management  Smart City", 
            "title": "Related Scenarios"
        }, 
        {
            "location": "/demos/Heatstress Routing/", 
            "text": "Heatstress Routing App\n\n\n\n\nTodo\n\n\nJulian's student\n - related repository is \nhttps://github.com/biggis-project/path-optimizer\n\n\n\n\nRelated Scenarios\n\n\n\n\nSmart City\n\n\n\n\nBack-end REST-API\n\n\nThe back-end exposes a simple REST-API, that can be used for routing or to find the optimal point in time.\n\n\nGeneral information\n\n\nThe rest api can be accessed on \nhttp://localhost:8080/heatstressrouting/api/v1\n. JSON is supported as the only output format.\n\n\nServer information\n\n\n\n\n\n\nURL:\n \nhttp://localhost:8080/heatstressrouting/api/v1/info\n\n\n\n\n\n\nDescription:\n returns some information about the running service, e.g. the supported area and time range\n\n\n\n\n\n\nParameter:\n the \n/info\n site takes no parameter \n\n\n\n\n\n\nReturns:\n some information about the running service (see sample response below):\n\n\n\n\nbbox\n: the bounding box of the area supported by the service as an array of \n[min_lat, min_lng, max_lat, max_lng]\n.\n\n\ntime_range\n: the time range supported by the service, given as time stamps of the form \n2014-08-23T00:00\n.\n\n\nplace_types\n: a list of place types supported by the optimal time api\n\n\n\n\n\n\n\n\nExample:\n\n\n\n\nSample Request:\n \nhttp://localhost:8080/heatstressrouting/api/v1/info\n\n\nSample Response:\n\n\n{\n\n    \nservice\n:\nheat stress routing\n,\n\n    \nversion\n:\n0.0.1-SNAPSHOT\n,\n\n    \nbuild_time\n:\n2016-09-27T07:50:42Z\n,\n\n    \nbbox\n:[\n\n        \n48.99\n,\n\n        \n8.385\n,\n\n        \n49.025\n,\n\n        \n8.435\n\n    \n],\n\n    \ntime_range\n:{\n\n        \nfrom\n:\n2014-08-23T00:00\n,\n\n        \nto\n:\n2016-02-23T23:00\n\n    \n},\n\n    \nplace_types\n:[\n\n        \nbakery\n,\n\n        \ntaxi\n,\n\n        \npost_office\n,\n\n        \nice_cream\n,\n\n        \ndentist\n,\n\n        \npost_box\n,\n\n        \nsupermarket\n,\n\n        \ntoilets\n,\n\n        \nbank\n,\n\n        \ncafe\n,\n\n        \npolice\n,\n\n        \ndoctors\n,\n\n        \npharmacy\n,\n\n        \ndrinking_water\n,\n\n        \natm\n,\n\n        \nclinic\n,\n\n        \nkiosk\n,\n\n        \nhospital\n,\n\n        \nchemist\n,\n\n        \nfast_food\n\n    \n]\n\n\n}\n\n\n\n\n\n\n\n\n\n\nRouting\n\n\n\n\n\n\nURL:\n \nhttp://localhost:8080/heatstressrouting/api/v1/routing\n\n\n\n\n\n\nDescription:\n Computes the optimal route (regarding heat stress) between a start and a destination at a given time.\n\n\n\n\n\n\nParameter:\n the \n/routing\n api supports the following parameter (some are optional):\n\n\n\n\nstart\n: the start point as pair of a latitude value and longitude value (in that order) seperated by a comma, e.g. \nstart=49.0118083,8.4251357\n. \n\n\ndestination\n: the destination as pair of a latitude value and longitude value (in that order) seperated by a comma, e.g. \ndestination=49.0126868,8.4065707\n. \n\n\ntime\n: the date and time the optimal route should be searched for; a time stamp of the form \nYYYY-MM-DDTHH:MM:SS\n, e.g. \ntime=2015-08-31T10:00:00\n. The value must be in the time range returned by \n/info\n (see \nabove\n).\n\n\nweighting\n (optional): the weightings to be used; a comma seperated list of the supported weightings (\nshortest\n, \nheatindex\n and \ntemperature\n), e.g. \nweighting=shortest,heatindex,temperature\n; the default is \nweighting=shortest,heatindex\n; the results for the \nshortest\n weighting are always returned, even if the value is omited in the weighings list.\n\n\n\n\n\n\n\n\nReturns:\n the path and some other information for each of the weightings:\n\n\n\n\n\n\nstatus\n: the status of the request; \nOK\n is everthing is okay, \nBAD_REQUEST\n if a invalid request was send or \nINTERNAL_SERVER_ERROR\n if an internal error occoured.\n\n\n\n\nstatus_code\n: the HTTP status code returned.\n\n\n\n\nresults\n: the results for each weighting:\n\n\n\n\nweighting\n: the weighting used for that result (see parameter \nweighting\n above).\n\n\nstart\n: the coordinates of the start point as array of \n[lat, lng]\n.\n\n\ndestination\n: the coordinates of the destination as array of \n[lat, lng]\n.\n\n\ndistance\n: the length of the route in meter.\n\n\nduration\n: the walking time in milli seconds.\n\n\nroute_weights\n: the route weights of the selected weightings for the route.\n\n\npath\n: the geometry of the path found; an array of points, were each point is an array of [lat, lng]`.\n\n\n\n\n\n\n\n\nExample:\n\n\n\n\nSample Request:\n \nhttp://localhost:8080/heatstressrouting/api/v1/routing?start=49.0118083,8.4251357\ndestination=49.0126868,8.4065707\ntime=2015-08-31T10:00:00\nweighting=shortest,heatindex,temperature\n\n\nSample Response:\n\n\n{\n\n    \nstatus\n:\nOK\n,\n\n    \nstatus_code\n:\n200\n,\n\n    \nresults\n:{\n\n        \nshortest\n:{\n\n            \nweighting\n:\nshortest\n,\n\n            \nstart\n:[\n\n                \n49.0118083\n,\n\n                \n8.4251357\n\n            \n],\n\n            \ndestination\n:[\n\n                \n49.0126868\n,\n\n                \n8.4065707\n\n            \n],\n\n            \ndistance\n:\n1698.2989202985977\n,\n\n            \nduration\n:\n1222740\n,\n\n            \nroute_weights\n:{\n\n                \ntemperature\n:\n50903.955833052285\n,\n\n                \nheatindex\n:\n50892.20496302502\n,\n\n                \nshortest\n:\n1698.2989202985977\n\n            \n},\n\n            \npath\n:[\n\n                \n[\n\n                    \n49.01190564077309\n,\n\n                    \n8.4250437301107\n\n                \n],\n\n                \n[\n\n                    \n49.01225359765262\n,\n\n                    \n8.425994591995952\n\n                \n],\n\n                \n//\n \npoints\n \nomitted\n \n...\n\n                \n[\n\n                    \n49.01272775130067\n,\n\n                    \n8.406514897340614\n\n                \n]\n\n            \n]\n\n        \n},\n\n        \nheatindex\n:{\n\n            \nweighting\n:\nheatindex\n,\n\n            \nstart\n:[\n\n                \n49.0118083\n,\n\n                \n8.4251357\n\n            \n],\n\n            \ndestination\n:[\n\n                \n49.0126868\n,\n\n                \n8.4065707\n\n            \n],\n\n            \ndistance\n:\n1901.8839202985973\n,\n\n            \nduration\n:\n1369323\n,\n\n            \nroute_weights\n:{\n\n                \ntemperature\n:\n51868.74807902536\n,\n\n                \nheatindex\n:\n51098.277424417196\n,\n\n                \nshortest\n:\n1901.8839202985978\n\n            \n},\n\n            \npath\n:[\n\n                \n[\n\n                    \n49.01190564077309\n,\n\n                    \n8.4250437301107\n\n                \n],\n\n                \n[\n\n                    \n49.01225359765262\n,\n\n                    \n8.425994591995952\n\n                \n],\n\n                \n//\n \npoints\n \nomitted\n \n...\n\n                \n[\n\n                    \n49.01272775130067\n,\n\n                    \n8.406514897340614\n\n                \n]\n\n            \n]\n\n        \n},\n\n        \ntemperature\n:{\n\n            \nweighting\n:\ntemperature\n,\n\n            \nstart\n:[\n\n                \n49.0118083\n,\n\n                \n8.4251357\n\n            \n],\n\n            \ndestination\n:[\n\n                \n49.0126868\n,\n\n                \n8.4065707\n\n            \n],\n\n            \ndistance\n:\n1901.8839202985973\n,\n\n            \nduration\n:\n1369323\n,\n\n            \nroute_weights\n:{\n\n                \ntemperature\n:\n51868.74807902536\n,\n\n                \nheatindex\n:\n51098.277424417196\n,\n\n                \nshortest\n:\n1901.8839202985978\n\n            \n},\n\n            \npath\n:[\n\n                \n[\n\n                    \n49.01190564077309\n,\n\n                    \n8.4250437301107\n\n                \n],\n\n                \n[\n\n                    \n49.01225359765262\n,\n\n                    \n8.425994591995952\n\n                \n],\n\n                \n//\n \npoints\n \nomitted\n \n...\n\n                \n[\n\n                    \n49.01272775130067\n,\n\n                    \n8.406514897340614\n\n                \n]\n\n            \n]\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\nOptimal time\n\n\n\n\n\n\nURL:\n \nhttp://localhost:8080/heatstressrouting/api/v1/optimaltime\n\n\n\n\n\n\nDescription:\n Performce a nearby search for a given start point and computes for every place that fulfills a specified criterion an optimal point in time, i.e. the time with the minimal heat stress.\n\n\n\n\n\n\nParameter:\n the \n/optimaltime\n api supports the following parameter (some are optional):\n\n\n\n\nstart\n: the start point as pair of a latitude value and longitude value (in that order) seperated by a comma, e.g. \nstart=49.0118083,8.4251357\n. \n\n\ntime\n: the date and time the optimal route should be searched for; a time stamp of the form \nYYYY-MM-DDTHH:MM:SS\n, e.g. \ntime=2015-08-31T10:00:00\n. The value must be in the time range returned by \n/info\n (see \nabove\n).\n\n\nplace_type\n: the place type to search for; a comma seperated list of supported place types, e.g. \nplace_type=supermarket,chemist\n; a complete list of supported place list can be queried using the \ninfo\n api (see \nabove\n). Currently the following place tyes are supported: \nbakery\n, \ntaxi\n, \npost_office\n, \nice_cream\n, \ndentist\n, \npost_box\n, \nsupermarket\n, \ntoilets\n, \nbank\n, \ncafe\n, \npolice\n, \ndoctors\n, \npharmacy\n, \ndrinking_water\n, \natm\n, \nclinic\n, \nkiosk\n, \nhospital\n, \nchemist\n, \nfast_food\n. The place types are mapped to the corresponding \nshop\n respectively \namenity\n tags.\n\n\nmax_results\n (optional): the maximum number of results to consider for the nearby search (an positive integer), e.g. \nmax_results=10\n; the default value is 5.\n\n\nmax_distance\n (optional): the maximum direct distance (as the crow flies) between the start point and the place in meter, e.g. \nmax_distance=500.0\n; the default value is 1000.0 meter.\n\n\ntime_buffer\n (optional): the minimum time needed at the place (in minutes), i.e. the optimal time is chossen so that the place is opened for a least \ntime_buffer\n when the user arrives, e.g. \ntime_buffer=30\n; the default value is 15 miniutes.\n\n\nearliest_time\n (optional): the earliest desired time, either a time stamp, e.g. \nearliest_time=2015-08-31T09:00\n or the string \nnull\n (case is ignored); the default value is \nnull\n. If both \nearliest_time\n and \nlatest_time\n are specified, \nearliest_time\n must be before \nlatest_time\n.\n\n\nlatest_time\n (optional): the latest desired time, either a time stamp, e.g. \nlatest_time=2015-08-31T17:00\n or the string \nnull\n (case is ignored); the default value is \nnull\n. If both \nearliest_time\n and \nlatest_time\n are specified, \nearliest_time\n must be before \nlatest_time\n; \nlatest_time\n must be after \ntime\n.\n\n\n\n\n\n\n\n\nReturns:\n the optimal point in time for each place found in the specified radius ranked by the optimal-value:\n\n\n\n\n\n\nstatus\n: the status of the request; \nOK\n if everthing is okay, \nNO_REULTS\n if not results were found, \nBAD_REQUEST\n if a invalid request was send to the server or \nINTERNAL_SERVER_ERROR\n if an internal server error occoured.\n\n\n\n\nstatus_code\n: the HTTP status code returned.\n\n\n\n\nresults\n: the result for each place found during the nearby search:\n\n\n\n\nrank\n: the rank of the place according to the optimal value (were 1 is the best rank).\n\n\nname\n: the name of the place.\n\n\nosm_id\n: the \nOpenStreetMap Node ID\n of the place.\n\n\nlocation\n: the coordinates of the places as an array of \n[lat, lng]\n.\n\n\nopening_hours\n: the opening hours of the place; the format specification can be found \nhere\n.\n\n\noptimal_time\n: the optimal point in time found for that place, e.g. \n2015-08-31T20:00\n\n\noptimal_value\n: the optimal value found for the place; the value considering the heat stress acording to steadman's heatindex \n(Steadmean, 1979)\n as well as the distance between the start and the place.\n\n\ndistance\n: the length of the optimal path (see \nRouting\n above) from the start to the place in meter.\n\n\nduration\n: the time needed to walk from the start to the place (in milli seconds).\n\n\npath_optimal\n: the geometry of the optimal path (see \nRouting\n above).\n\n\ndistance_shortest\n: the length of the shortest path between the start and the place (in meter).\n\n\nduration_shortest\n: the time needed to walk the shortest path between the start and the place (in milli seconds).\n\n\npath_optimal\n: the geometry of the shortest path (see \nRouting\n above).\n\n\n\n\n\n\n\n\nExample:\n\n\n\n\nSample Request:\n \nhttp://localhost:8080/heatstressrouting/api/v1/optimaltime?start=49.0118083,8.4251357\ntime=2015-08-31T10:00:00\nplace_type=supermarket\nmax_distance=1000\nmax_results=5\ntime_buffer=15\nearliest_time=2015-08-31T09:00:00\nlatest_time=2015-08-31T20:00:00\n\n\nSample Response:\n\n\n{\n\n    \nstatus\n:\nOK\n,\n\n    \nstatus_code\n:\n200\n,\n\n    \nresults\n:[\n\n        \n{\n\n            \nrank\n:\n1\n,\n\n            \nname\n:\nRewe City\n,\n\n            \nosm_id\n:\n897615202\n,\n\n            \nlocation\n:[\n\n                \n49.0096613\n,\n\n                \n8.4237272\n\n            \n],\n\n            \nopening_hours\n:\nMo-Sa 07:00-22:00; Su,PH off\n,\n\n            \noptimal_time\n:\n2015-08-31T20:00\n,\n\n            \noptimal_value\n:\n12515.36230258099\n,\n\n            \ndistance\n:\n539.1839746027457\n,\n\n            \nduration\n:\n388207\n,\n\n            \npath_optimal\n:[\n\n                \n[\n\n                    \n49.01190564077309\n,\n\n                    \n8.4250437301107\n\n                \n],\n\n                \n[\n\n                    \n49.011967867880344\n,\n\n                    \n8.425196821060705\n\n                \n],\n\n                \n//\n \npoints\n \nomitted\n \n...\n\n                \n[\n\n                    \n49.00954480942009\n,\n\n                    \n8.423681942364334\n\n                \n]\n\n            \n],\n\n            \ndistance_shortest\n:\n468.99728441805115\n,\n\n            \nduration_shortest\n:\n337669\n,\n\n            \npath_shortest\n:[\n\n                \n[\n\n                    \n49.01190564077309\n,\n\n                    \n8.4250437301107\n\n                \n],\n\n                \n[\n\n                    \n49.011967867880344\n,\n\n                    \n8.425196821060705\n\n                \n],\n\n                \n//\n \npoints\n \nomitted\n \n...\n\n                \n[\n\n                    \n49.00954480942009\n,\n\n                    \n8.423681942364334\n\n                \n]\n\n            \n]\n\n        \n},\n\n        \n{\n\n            \nrank\n:\n2\n,\n\n            \nname\n:\nOststadt Super-Bio-Markt\n,\n\n            \nosm_id\n:\n931682116\n,\n\n            \nlocation\n:[\n\n                \n49.009433\n,\n\n                \n8.4234214\n\n            \n],\n\n            \nopening_hours\n:\nMo-Fr 09:00-13:00,14:00-18:30; Sa 09:00-13:00\n,\n\n            \noptimal_time\n:\n2015-08-31T18:09:19.199\n,\n\n            \noptimal_value\n:\n14318.962937267655\n,\n\n            \ndistance\n:\n473.346750294328\n,\n\n            \nduration\n:\n340801\n,\n\n            \npath_optimal\n:[\n\n                \n[\n\n                    \n49.01190564077309\n,\n\n                    \n8.4250437301107\n\n                \n],\n\n                \n[\n\n                    \n49.011967867880344\n,\n\n                    \n8.425196821060705\n\n                \n],\n\n                \n//\n \npoints\n \nomitted\n \n...\n\n                \n[\n\n                    \n49.00944708743373\n,\n\n                    \n8.4235711322383\n\n                \n]\n\n            \n],\n\n            \ndistance_shortest\n:\n473.346750294328\n,\n\n            \nduration_shortest\n:\n340801\n,\n\n            \npath_shortest\n:[\n\n                \n[\n\n                    \n49.01190564077309\n,\n\n                    \n8.4250437301107\n\n                \n],\n\n                \n[\n\n                    \n49.011967867880344\n,\n\n                    \n8.425196821060705\n\n                \n],\n\n                \n//\n \npoints\n \nomitted\n \n...\n\n                \n[\n\n                    \n49.00944708743373\n,\n\n                    \n8.4235711322383\n\n                \n]\n\n            \n]\n\n        \n}\n\n    \n]\n\n\n}\n\n\n\n\n\n\nError messages:\n\n\nIf an error occurs, e.g. because a bade request were send to the server or an internal server errors occurs, the server is sending a JSON response with the following content:\n\n\n\n\nstatus\n: the status of the request; \nOK\n if everthing is okay, \nNO_REULTS\n if not results were found, \nBAD_REQUEST\n if a invalid request was send to the server or \nINTERNAL_SERVER_ERROR\n if an internal server error occoured.\n\n\nstatus_code\n: the HTTP status code returned.\n\n\nmessages\n: an array of human readable error messages.\n\n\n\n\nExample:\n\n\n\n\nExample Request:\n \nhttp://localhost:8080/heatstressrouting/api/v1/optimaltime?start=Schloss,%20Karlsruhe\ntime=2015-08-31T10:00:00\nplace_type=supermarket\n\n\nExample Response:\n \n\n{\n\n    \nstatus\n:\nBAD_REQUEST\n,\n\n    \nstatus_code\n:\n400\n,\n\n    \nmessages\n:[\n\n        \nstart (Schloss, Karlsruhe) could not be parsed: failed to parse coordinate; \nstart\n must be a pair of latitude and longitude seperated by a comma (\n,\n), e.g. \n49.0118083,8.4251357\n)\n\n    \n]\n\n\n}\n\n\n\n\n\n\nReferences\n\n\n\n\nCitation\n\n\nSteadman, R. G. \nThe Assessment of Sultriness. Part I: A Temperature-Humidity Index Based on Human Physiology and Clothing.\n\nScience Journal of Applied Meteorology, 1979, 18, 861-873, DOI: 10.1175/1520-0450(1979)018\n0861:TAOSPI\n2.0.CO;2", 
            "title": "Heatstress Routing"
        }, 
        {
            "location": "/demos/Heatstress Routing/#heatstress-routing-app", 
            "text": "Todo  Julian's student  - related repository is  https://github.com/biggis-project/path-optimizer", 
            "title": "Heatstress Routing App"
        }, 
        {
            "location": "/demos/Heatstress Routing/#related-scenarios", 
            "text": "Smart City", 
            "title": "Related Scenarios"
        }, 
        {
            "location": "/demos/Heatstress Routing/#back-end-rest-api", 
            "text": "The back-end exposes a simple REST-API, that can be used for routing or to find the optimal point in time.", 
            "title": "Back-end REST-API"
        }, 
        {
            "location": "/demos/Heatstress Routing/#general-information", 
            "text": "The rest api can be accessed on  http://localhost:8080/heatstressrouting/api/v1 . JSON is supported as the only output format.", 
            "title": "General information"
        }, 
        {
            "location": "/demos/Heatstress Routing/#server-information", 
            "text": "URL:   http://localhost:8080/heatstressrouting/api/v1/info    Description:  returns some information about the running service, e.g. the supported area and time range    Parameter:  the  /info  site takes no parameter     Returns:  some information about the running service (see sample response below):   bbox : the bounding box of the area supported by the service as an array of  [min_lat, min_lng, max_lat, max_lng] .  time_range : the time range supported by the service, given as time stamps of the form  2014-08-23T00:00 .  place_types : a list of place types supported by the optimal time api     Example:   Sample Request:   http://localhost:8080/heatstressrouting/api/v1/info  Sample Response:  { \n     service : heat stress routing , \n     version : 0.0.1-SNAPSHOT , \n     build_time : 2016-09-27T07:50:42Z , \n     bbox :[ \n         48.99 , \n         8.385 , \n         49.025 , \n         8.435 \n     ], \n     time_range :{ \n         from : 2014-08-23T00:00 , \n         to : 2016-02-23T23:00 \n     }, \n     place_types :[ \n         bakery , \n         taxi , \n         post_office , \n         ice_cream , \n         dentist , \n         post_box , \n         supermarket , \n         toilets , \n         bank , \n         cafe , \n         police , \n         doctors , \n         pharmacy , \n         drinking_water , \n         atm , \n         clinic , \n         kiosk , \n         hospital , \n         chemist , \n         fast_food \n     ]  }", 
            "title": "Server information"
        }, 
        {
            "location": "/demos/Heatstress Routing/#routing", 
            "text": "URL:   http://localhost:8080/heatstressrouting/api/v1/routing    Description:  Computes the optimal route (regarding heat stress) between a start and a destination at a given time.    Parameter:  the  /routing  api supports the following parameter (some are optional):   start : the start point as pair of a latitude value and longitude value (in that order) seperated by a comma, e.g.  start=49.0118083,8.4251357 .   destination : the destination as pair of a latitude value and longitude value (in that order) seperated by a comma, e.g.  destination=49.0126868,8.4065707 .   time : the date and time the optimal route should be searched for; a time stamp of the form  YYYY-MM-DDTHH:MM:SS , e.g.  time=2015-08-31T10:00:00 . The value must be in the time range returned by  /info  (see  above ).  weighting  (optional): the weightings to be used; a comma seperated list of the supported weightings ( shortest ,  heatindex  and  temperature ), e.g.  weighting=shortest,heatindex,temperature ; the default is  weighting=shortest,heatindex ; the results for the  shortest  weighting are always returned, even if the value is omited in the weighings list.     Returns:  the path and some other information for each of the weightings:    status : the status of the request;  OK  is everthing is okay,  BAD_REQUEST  if a invalid request was send or  INTERNAL_SERVER_ERROR  if an internal error occoured.   status_code : the HTTP status code returned.   results : the results for each weighting:   weighting : the weighting used for that result (see parameter  weighting  above).  start : the coordinates of the start point as array of  [lat, lng] .  destination : the coordinates of the destination as array of  [lat, lng] .  distance : the length of the route in meter.  duration : the walking time in milli seconds.  route_weights : the route weights of the selected weightings for the route.  path : the geometry of the path found; an array of points, were each point is an array of [lat, lng]`.     Example:   Sample Request:   http://localhost:8080/heatstressrouting/api/v1/routing?start=49.0118083,8.4251357 destination=49.0126868,8.4065707 time=2015-08-31T10:00:00 weighting=shortest,heatindex,temperature  Sample Response:  { \n     status : OK , \n     status_code : 200 , \n     results :{ \n         shortest :{ \n             weighting : shortest , \n             start :[ \n                 49.0118083 , \n                 8.4251357 \n             ], \n             destination :[ \n                 49.0126868 , \n                 8.4065707 \n             ], \n             distance : 1698.2989202985977 , \n             duration : 1222740 , \n             route_weights :{ \n                 temperature : 50903.955833052285 , \n                 heatindex : 50892.20496302502 , \n                 shortest : 1698.2989202985977 \n             }, \n             path :[ \n                 [ \n                     49.01190564077309 , \n                     8.4250437301107 \n                 ], \n                 [ \n                     49.01225359765262 , \n                     8.425994591995952 \n                 ], \n                 //   points   omitted   ... \n                 [ \n                     49.01272775130067 , \n                     8.406514897340614 \n                 ] \n             ] \n         }, \n         heatindex :{ \n             weighting : heatindex , \n             start :[ \n                 49.0118083 , \n                 8.4251357 \n             ], \n             destination :[ \n                 49.0126868 , \n                 8.4065707 \n             ], \n             distance : 1901.8839202985973 , \n             duration : 1369323 , \n             route_weights :{ \n                 temperature : 51868.74807902536 , \n                 heatindex : 51098.277424417196 , \n                 shortest : 1901.8839202985978 \n             }, \n             path :[ \n                 [ \n                     49.01190564077309 , \n                     8.4250437301107 \n                 ], \n                 [ \n                     49.01225359765262 , \n                     8.425994591995952 \n                 ], \n                 //   points   omitted   ... \n                 [ \n                     49.01272775130067 , \n                     8.406514897340614 \n                 ] \n             ] \n         }, \n         temperature :{ \n             weighting : temperature , \n             start :[ \n                 49.0118083 , \n                 8.4251357 \n             ], \n             destination :[ \n                 49.0126868 , \n                 8.4065707 \n             ], \n             distance : 1901.8839202985973 , \n             duration : 1369323 , \n             route_weights :{ \n                 temperature : 51868.74807902536 , \n                 heatindex : 51098.277424417196 , \n                 shortest : 1901.8839202985978 \n             }, \n             path :[ \n                 [ \n                     49.01190564077309 , \n                     8.4250437301107 \n                 ], \n                 [ \n                     49.01225359765262 , \n                     8.425994591995952 \n                 ], \n                 //   points   omitted   ... \n                 [ \n                     49.01272775130067 , \n                     8.406514897340614 \n                 ] \n             ] \n         } \n     }  }", 
            "title": "Routing"
        }, 
        {
            "location": "/demos/Heatstress Routing/#optimal-time", 
            "text": "URL:   http://localhost:8080/heatstressrouting/api/v1/optimaltime    Description:  Performce a nearby search for a given start point and computes for every place that fulfills a specified criterion an optimal point in time, i.e. the time with the minimal heat stress.    Parameter:  the  /optimaltime  api supports the following parameter (some are optional):   start : the start point as pair of a latitude value and longitude value (in that order) seperated by a comma, e.g.  start=49.0118083,8.4251357 .   time : the date and time the optimal route should be searched for; a time stamp of the form  YYYY-MM-DDTHH:MM:SS , e.g.  time=2015-08-31T10:00:00 . The value must be in the time range returned by  /info  (see  above ).  place_type : the place type to search for; a comma seperated list of supported place types, e.g.  place_type=supermarket,chemist ; a complete list of supported place list can be queried using the  info  api (see  above ). Currently the following place tyes are supported:  bakery ,  taxi ,  post_office ,  ice_cream ,  dentist ,  post_box ,  supermarket ,  toilets ,  bank ,  cafe ,  police ,  doctors ,  pharmacy ,  drinking_water ,  atm ,  clinic ,  kiosk ,  hospital ,  chemist ,  fast_food . The place types are mapped to the corresponding  shop  respectively  amenity  tags.  max_results  (optional): the maximum number of results to consider for the nearby search (an positive integer), e.g.  max_results=10 ; the default value is 5.  max_distance  (optional): the maximum direct distance (as the crow flies) between the start point and the place in meter, e.g.  max_distance=500.0 ; the default value is 1000.0 meter.  time_buffer  (optional): the minimum time needed at the place (in minutes), i.e. the optimal time is chossen so that the place is opened for a least  time_buffer  when the user arrives, e.g.  time_buffer=30 ; the default value is 15 miniutes.  earliest_time  (optional): the earliest desired time, either a time stamp, e.g.  earliest_time=2015-08-31T09:00  or the string  null  (case is ignored); the default value is  null . If both  earliest_time  and  latest_time  are specified,  earliest_time  must be before  latest_time .  latest_time  (optional): the latest desired time, either a time stamp, e.g.  latest_time=2015-08-31T17:00  or the string  null  (case is ignored); the default value is  null . If both  earliest_time  and  latest_time  are specified,  earliest_time  must be before  latest_time ;  latest_time  must be after  time .     Returns:  the optimal point in time for each place found in the specified radius ranked by the optimal-value:    status : the status of the request;  OK  if everthing is okay,  NO_REULTS  if not results were found,  BAD_REQUEST  if a invalid request was send to the server or  INTERNAL_SERVER_ERROR  if an internal server error occoured.   status_code : the HTTP status code returned.   results : the result for each place found during the nearby search:   rank : the rank of the place according to the optimal value (were 1 is the best rank).  name : the name of the place.  osm_id : the  OpenStreetMap Node ID  of the place.  location : the coordinates of the places as an array of  [lat, lng] .  opening_hours : the opening hours of the place; the format specification can be found  here .  optimal_time : the optimal point in time found for that place, e.g.  2015-08-31T20:00  optimal_value : the optimal value found for the place; the value considering the heat stress acording to steadman's heatindex  (Steadmean, 1979)  as well as the distance between the start and the place.  distance : the length of the optimal path (see  Routing  above) from the start to the place in meter.  duration : the time needed to walk from the start to the place (in milli seconds).  path_optimal : the geometry of the optimal path (see  Routing  above).  distance_shortest : the length of the shortest path between the start and the place (in meter).  duration_shortest : the time needed to walk the shortest path between the start and the place (in milli seconds).  path_optimal : the geometry of the shortest path (see  Routing  above).     Example:   Sample Request:   http://localhost:8080/heatstressrouting/api/v1/optimaltime?start=49.0118083,8.4251357 time=2015-08-31T10:00:00 place_type=supermarket max_distance=1000 max_results=5 time_buffer=15 earliest_time=2015-08-31T09:00:00 latest_time=2015-08-31T20:00:00  Sample Response:  { \n     status : OK , \n     status_code : 200 , \n     results :[ \n         { \n             rank : 1 , \n             name : Rewe City , \n             osm_id : 897615202 , \n             location :[ \n                 49.0096613 , \n                 8.4237272 \n             ], \n             opening_hours : Mo-Sa 07:00-22:00; Su,PH off , \n             optimal_time : 2015-08-31T20:00 , \n             optimal_value : 12515.36230258099 , \n             distance : 539.1839746027457 , \n             duration : 388207 , \n             path_optimal :[ \n                 [ \n                     49.01190564077309 , \n                     8.4250437301107 \n                 ], \n                 [ \n                     49.011967867880344 , \n                     8.425196821060705 \n                 ], \n                 //   points   omitted   ... \n                 [ \n                     49.00954480942009 , \n                     8.423681942364334 \n                 ] \n             ], \n             distance_shortest : 468.99728441805115 , \n             duration_shortest : 337669 , \n             path_shortest :[ \n                 [ \n                     49.01190564077309 , \n                     8.4250437301107 \n                 ], \n                 [ \n                     49.011967867880344 , \n                     8.425196821060705 \n                 ], \n                 //   points   omitted   ... \n                 [ \n                     49.00954480942009 , \n                     8.423681942364334 \n                 ] \n             ] \n         }, \n         { \n             rank : 2 , \n             name : Oststadt Super-Bio-Markt , \n             osm_id : 931682116 , \n             location :[ \n                 49.009433 , \n                 8.4234214 \n             ], \n             opening_hours : Mo-Fr 09:00-13:00,14:00-18:30; Sa 09:00-13:00 , \n             optimal_time : 2015-08-31T18:09:19.199 , \n             optimal_value : 14318.962937267655 , \n             distance : 473.346750294328 , \n             duration : 340801 , \n             path_optimal :[ \n                 [ \n                     49.01190564077309 , \n                     8.4250437301107 \n                 ], \n                 [ \n                     49.011967867880344 , \n                     8.425196821060705 \n                 ], \n                 //   points   omitted   ... \n                 [ \n                     49.00944708743373 , \n                     8.4235711322383 \n                 ] \n             ], \n             distance_shortest : 473.346750294328 , \n             duration_shortest : 340801 , \n             path_shortest :[ \n                 [ \n                     49.01190564077309 , \n                     8.4250437301107 \n                 ], \n                 [ \n                     49.011967867880344 , \n                     8.425196821060705 \n                 ], \n                 //   points   omitted   ... \n                 [ \n                     49.00944708743373 , \n                     8.4235711322383 \n                 ] \n             ] \n         } \n     ]  }", 
            "title": "Optimal time"
        }, 
        {
            "location": "/demos/Heatstress Routing/#error-messages", 
            "text": "If an error occurs, e.g. because a bade request were send to the server or an internal server errors occurs, the server is sending a JSON response with the following content:   status : the status of the request;  OK  if everthing is okay,  NO_REULTS  if not results were found,  BAD_REQUEST  if a invalid request was send to the server or  INTERNAL_SERVER_ERROR  if an internal server error occoured.  status_code : the HTTP status code returned.  messages : an array of human readable error messages.   Example:   Example Request:   http://localhost:8080/heatstressrouting/api/v1/optimaltime?start=Schloss,%20Karlsruhe time=2015-08-31T10:00:00 place_type=supermarket  Example Response:   { \n     status : BAD_REQUEST , \n     status_code : 400 , \n     messages :[ \n         start (Schloss, Karlsruhe) could not be parsed: failed to parse coordinate;  start  must be a pair of latitude and longitude seperated by a comma ( , ), e.g.  49.0118083,8.4251357 ) \n     ]  }", 
            "title": "Error messages:"
        }, 
        {
            "location": "/demos/Heatstress Routing/#references", 
            "text": "Citation  Steadman, R. G.  The Assessment of Sultriness. Part I: A Temperature-Humidity Index Based on Human Physiology and Clothing. \nScience Journal of Applied Meteorology, 1979, 18, 861-873, DOI: 10.1175/1520-0450(1979)018 0861:TAOSPI 2.0.CO;2", 
            "title": "References"
        }, 
        {
            "location": "/demos/Hotspot Analysis/", 
            "text": "Todo\n\n\nPhillip Zehnder used the NY-Taxi data in stream pipes\n\n\n\n\n\n\nTodo\n\n\nWe can take some text from GISCUP and from our papers.\n\n\n\n\n\n\nTodo\n\n\nMarc's master thesis about stability of hotspots", 
            "title": "Hotspot Analysis"
        }, 
        {
            "location": "/demos/Invasive Species/", 
            "text": "Todo\n\n\nHannes M\u00fcller (LUBW), Johannes Kutterer (Disy), Daniel Seebacher (Uni Konstanz)\n\n\n\n\nDrosophila Suzuki\n\n\n\n\n\u00dcberwachung des invasiven Sch\u00e4dlings Kirschessigfliege (KEF)\n\n\nDatenerhebung durch Weinbauinstitut\n\n\nProblem:\n Datenerhebung teilweise unsystematisch\n\n\n\n\nHypothesenentwicklung\n\n\nHypothesenentwicklung zur Vermehrung der KEF aufgrund biologischer Erkenntnisse\n(v.a. abh\u00e4ngig von Umgebungstemperatur und Vegetation)\n\n\nEntwicklung einer Vektordatenpipeline in BigGIS\n\n\n\n\nDatenquelle \nwww.vitimeteo.de\n\n\nDatensammlung (kafka)\n\n\nProzessierung (flink)\n\n\nVisualisierung (Uni-Konstanz)\n\n\n\n\nResults\n\n\n\n\nH\u00e4ufiges Auftreten der KEF\n\n\nN\u00e4he zu Wald -\n Refugium f\u00fcr Kirschessigfliege zum \u00dcberleben bei widrigen Wetterbedingungen\n\n\n\n\nRelated Scenarios\n\n\n\n\nEnvironment", 
            "title": "Invasive Species"
        }, 
        {
            "location": "/demos/Invasive Species/#drosophila-suzuki", 
            "text": "\u00dcberwachung des invasiven Sch\u00e4dlings Kirschessigfliege (KEF)  Datenerhebung durch Weinbauinstitut  Problem:  Datenerhebung teilweise unsystematisch", 
            "title": "Drosophila Suzuki"
        }, 
        {
            "location": "/demos/Invasive Species/#hypothesenentwicklung", 
            "text": "Hypothesenentwicklung zur Vermehrung der KEF aufgrund biologischer Erkenntnisse\n(v.a. abh\u00e4ngig von Umgebungstemperatur und Vegetation)", 
            "title": "Hypothesenentwicklung"
        }, 
        {
            "location": "/demos/Invasive Species/#entwicklung-einer-vektordatenpipeline-in-biggis", 
            "text": "Datenquelle  www.vitimeteo.de  Datensammlung (kafka)  Prozessierung (flink)  Visualisierung (Uni-Konstanz)", 
            "title": "Entwicklung einer Vektordatenpipeline in BigGIS"
        }, 
        {
            "location": "/demos/Invasive Species/#results", 
            "text": "H\u00e4ufiges Auftreten der KEF  N\u00e4he zu Wald -  Refugium f\u00fcr Kirschessigfliege zum \u00dcberleben bei widrigen Wetterbedingungen", 
            "title": "Results"
        }, 
        {
            "location": "/demos/Invasive Species/#related-scenarios", 
            "text": "Environment", 
            "title": "Related Scenarios"
        }, 
        {
            "location": "/demos/Land Use Classification/", 
            "text": "Todo\n\n\nAdrian\n\n\n\n\nKlassifikation von Luftbildern nach Nutzungsklassen\n\n\nTools\n\n\n\n\nMaschinelles lernen\n\n\nTraining: Multiclass SVM\n\n\nGeotrellis\n\n\n\n\nBeispiel\n\n\n\n\nKlassifikation von Luftbildern von Mai-Aug 2016\n\n\nKombination eines Stacks: Luftbilder + Satellitenbilder (IR, Aufl\u00f6sung 2m)\n\n\nTraining von Mutliclass SVM mit manuell klassifizierten Trainingsdaten (klassifizierte Bildausschnitte)\n\n\n\n\nAusblick\n\n\n\n\nHinzunahme von weiteren Layers, zB.\n\n\nGeographische H\u00f6he\n\n\nHomogenit\u00e4t der Textur\n\n\nWeitere Klassifikatoren\n\n\n\n\nRelated Scenarios\n\n\n\n\nEnvironment\n\n\nSmart City", 
            "title": "Land Use Classification"
        }, 
        {
            "location": "/demos/Land Use Classification/#klassifikation-von-luftbildern-nach-nutzungsklassen", 
            "text": "", 
            "title": "Klassifikation von Luftbildern nach Nutzungsklassen"
        }, 
        {
            "location": "/demos/Land Use Classification/#tools", 
            "text": "Maschinelles lernen  Training: Multiclass SVM  Geotrellis", 
            "title": "Tools"
        }, 
        {
            "location": "/demos/Land Use Classification/#beispiel", 
            "text": "Klassifikation von Luftbildern von Mai-Aug 2016  Kombination eines Stacks: Luftbilder + Satellitenbilder (IR, Aufl\u00f6sung 2m)  Training von Mutliclass SVM mit manuell klassifizierten Trainingsdaten (klassifizierte Bildausschnitte)", 
            "title": "Beispiel"
        }, 
        {
            "location": "/demos/Land Use Classification/#ausblick", 
            "text": "Hinzunahme von weiteren Layers, zB.  Geographische H\u00f6he  Homogenit\u00e4t der Textur  Weitere Klassifikatoren", 
            "title": "Ausblick"
        }, 
        {
            "location": "/demos/Land Use Classification/#related-scenarios", 
            "text": "Environment  Smart City", 
            "title": "Related Scenarios"
        }, 
        {
            "location": "/demos/Optimal Flight Plan for Drones/", 
            "text": "Todo\n\n\nKatharina", 
            "title": "Optimal Flight Plan for Drones"
        }, 
        {
            "location": "/demos/Placement of Sensors/", 
            "text": "Placement of sensors under uncertainty\n\n\n\n\nTodo\n\n\nKatharina", 
            "title": "Placement of Sensors"
        }, 
        {
            "location": "/demos/Placement of Sensors/#placement-of-sensors-under-uncertainty", 
            "text": "Todo  Katharina", 
            "title": "Placement of sensors under uncertainty"
        }, 
        {
            "location": "/demos/Prediction of Gas Dispersion/", 
            "text": "Modeling of gas clouds and their dispersion over time.\n\n\n\n\nTodo\n\n\nJulian's bachelor student (maybe text from his bc-thesis?)", 
            "title": "Prediction of Gas Dispersion"
        }, 
        {
            "location": "/demos/Urban Heat Islands/", 
            "text": "Todo\n\n\nJulian\n\n\n\n\n\n\nTemperaturinseln in Karlsruhe und anderen St\u00e4dten\n\n\nTemperaturdaten: Volunteered geographic data (z.B. wunderground.com)\n\n\n\n\nKorrelation zwischen Bereichen in verschiedenen St\u00e4dten mit \u00e4hnlichem Temperaturverlauf -\n Zugang zu Ursachen f\u00fcr Temperaturentwicklung\n\n\n\n\n\n\nVorstellung der Heat-Islands-Analyse\n\n\n\n\nWetterstationen\n\n\nTechnik: Sensebox (\nhttps://sensebox.de\n)\n\n\nBeispielstation (\nhttps://opensensemap.org/explore/58b4354fe53e0b001251119d\n)\n\n\nHotspotanalyse (SoH, Stability of Hotspots):\n\n\nAbh\u00e4ngigkeit des Auftretens von Hotspots von der Aggregationsstufe\n\n\nAusblick:\n\n\nSensorfusion in Kooperation mit SDIL (smart data innovation lab)\n\n\n\n\nRelated Scenarios\n\n\n\n\nSmart City", 
            "title": "Urban Heat Islands"
        }, 
        {
            "location": "/demos/Urban Heat Islands/#related-scenarios", 
            "text": "Smart City", 
            "title": "Related Scenarios"
        }, 
        {
            "location": "/scenarios/Disaster Management/", 
            "text": "Todo\n\n\nBodo, Julian, Alex\n\n\n\n\n\n\nGoals\n\n\n\n\nOptimal support of the command and control team\n\n\nInformation is needed quickly (real time)\n\n\nRequirements / challenges:\n\n\nFast\n\n\nHow can data be delivered to the consumers through slow connection lines?\n\n\nDecision makers often without IT background", 
            "title": "Disaster Management"
        }, 
        {
            "location": "/scenarios/Disaster Management/#goals", 
            "text": "Optimal support of the command and control team  Information is needed quickly (real time)  Requirements / challenges:  Fast  How can data be delivered to the consumers through slow connection lines?  Decision makers often without IT background", 
            "title": "Goals"
        }, 
        {
            "location": "/scenarios/Environment/", 
            "text": "Todo\n\n\nJohannes (DISY), Manuel (UKON)", 
            "title": "Environment"
        }, 
        {
            "location": "/scenarios/Smart City/", 
            "text": "Todo\n\n\nJulian, ...", 
            "title": "Smart City"
        }
    ]
}